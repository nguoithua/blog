[ { "title": "Nguyên tắc thiết kế REST API", "url": "/posts/nguyen-tac-thiet-ke-rest-api/", "categories": "Software Engineering", "tags": "rest api, rest, api", "date": "2021-04-21 00:00:00 +0700", "snippet": "REST (Representational State Transfer) có thể hiểu đơn giản là một chuẩn thiết kế phần mềm, nó quy định cách mà client và server sẽ tương tác với nhau.Theo mình, việc thiết kế REST API là một việc hết sức khó khăn, nó không đơn giản như chỉ cần client gọi được là xong. Đôi khi, bạn sẽ bắt gặp nhữ..." }, { "title": "Chuẩn hoá dữ liệu trong REST API", "url": "/posts/chuan-hoa-du-lieu-trong-rest-api/", "categories": "Software Engineering", "tags": "rest api, rest, api", "date": "2021-04-19 00:00:00 +0700", "snippet": "Có 2 thứ không thể bỏ qua được trong một API, đó là request và response. Như là khi bạn thấy đâu đó một API, thứ đầu tiên mà bạn nghĩ request của API đó là gì, response là gì.Công việc hằng ngày của một backend developer bao gồm cả việc thiết kế API, xử lý và trả dữ liệu cho các dịch vụ gọi vào...." }, { "title": "8 định luật tiến hoá phần mềm của Lehman", "url": "/posts/8-dinh-luat-tien-hoa-phan-mem-cua-lehman/", "categories": "Software Engineering", "tags": "", "date": "2021-04-03 00:00:00 +0700", "snippet": "8 định luật tiến hoá phần mềm của Lehman.Có sinh sản là có tiến hoá. Sinh vật có F1 F2, phần cứng có model1 model2, phần mềm có version1 version2. Sinh vật tiến hoá theo định luật Darwin, Mendel. Phần cứng tiến hoá theo định luật Moore, nano. Phần mềm tiến hoá theo định luật gì?Giáo sư Lehman đã ..." }, { "title": "Khái niệm căn bản trong kiến trúc phần mềm", "url": "/posts/khai-niem-can-ban-trong-kien-trc-phan-mem/", "categories": "Software Architecture", "tags": "software architecture", "date": "2021-03-27 00:00:00 +0700", "snippet": "Trong bài viết này, hãy cùng điểm qua các khái niệm căn bản trong kiến trúc phần mềm để có thể hiểu rõ hơn trong các bài viết về sau.Trong bài viết này, hãy cùng điểm qua các khái niệm căn bản trong kiến trúc phần mềm để có thể hiểu rõ hơn trong các bài viết về sau.No Silver Bullets!Điều đầu tiên..." }, { "title": "Software Architecture Timeline", "url": "/posts/software-architecture-timeline/", "categories": "Software Architecture", "tags": "software architecture", "date": "2021-03-20 00:00:00 +0700", "snippet": " 1950s Non-structured Programming ~1951 – Assembly 1960s Structured Programming Layering: 1 tier with the UI, Business Logic and Data Storage ~1958 – Algol 1970s Procedural / Functional Programming ~1970 – Pascal ~1972 – C 19..." }, { "title": "Từ thợ đến thầy - Refactor", "url": "/posts/tu-tho-den-thay-refactor/", "categories": "Software Engineering", "tags": "refactor", "date": "2021-03-14 00:00:00 +0700", "snippet": "Khi chương trình tiến hoá, sẽ cần suy tính lại những quyết định cũ và bắt tay sửa lại chương trình. Việc sửa lại, cấu trúc lại chương trình mà giữ nguyên tính năng gọi là refactor. Việc này trên lí thuyết hoàn toàn tự nhiên, nhưng thực tế lại rất phức tạp. Cấp quản lí bảo: Ê, chương trình chạy đ..." }, { "title": "Mẹo vặt rsync", "url": "/posts/rsync-tips/", "categories": "Tutorial", "tags": "Linux, tips", "date": "2021-03-14 00:00:00 +0700", "snippet": "rsync là lệnh Linux (Mac cũng có) hay được dùng để đồng bộ (sync) 2 thư mục trên cùng một máy hoặc khác máy. Tất nhiên có thể dùng những công cụ khác như git hoặc svn để làm việc này, nhưng với trường hợp cần copy đơn giản thì không cần dùng dao mổ trâu để mổ gà như vậy, dùng rsync nhẹ nhàng hơn ..." }, { "title": "Full-text search nghĩa là gì?", "url": "/posts/full-text-search-nghia-la-gi/", "categories": "Software Engineering", "tags": "search, full-text, fulltext search", "date": "2021-03-14 00:00:00 +0700", "snippet": "Full-text search chứ không phải full text-search.Full-text với không full-textVí dụ bài viết có 3 phần: Tiêu đề Các tag Thân bàiNếu khi search, ta chỉ cho search trong tiêu đề và các tag, không cho search trong thân bài, thì đó không phải là full-text search. Thân bài thường rất dài so với hai..." }, { "title": "Xem các câu truy vấn trong Laravel", "url": "/posts/xem-cac-cau-truy-van-trong-laravel/", "categories": "Tutorial", "tags": "Laravel, tips", "date": "2021-03-13 00:00:00 +0700", "snippet": "Khi mấy bạn viết một ứng dụng với Laravel, có thể sẽ gặp một vài vấn đề. Ví dụ như mấy bạn viết một truy vấn phức tạp, mà muốn xem thằng Laravel đã thực hiện truy vấn như thế nào đến Cơ Sở Dữ Liệu. Để làm được điều đó thì mấy bạn cần phải sử dụng Laravel Debugbar hoặc là Laravel database profiler..." } ]
