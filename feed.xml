<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://nguoithua.net/</id><title>Nhân</title><subtitle>no-decription.</subtitle> <updated>2023-03-11T02:46:09+07:00</updated> <author> <name>Nhan Vo</name> <uri>https://nguoithua.net/</uri> </author><link rel="self" type="application/atom+xml" href="https://nguoithua.net/feed.xml"/><link rel="alternate" type="text/html" hreflang="vi-VN" href="https://nguoithua.net/"/> <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator> <rights> © 2023 Nhan Vo </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Nguyên tắc thiết kế REST API</title><link href="https://nguoithua.net/posts/nguyen-tac-thiet-ke-rest-api/" rel="alternate" type="text/html" title="Nguyên tắc thiết kế REST API" /><published>2021-04-21T00:00:00+07:00</published> <updated>2021-04-21T00:00:00+07:00</updated> <id>https://nguoithua.net/posts/nguyen-tac-thiet-ke-rest-api/</id> <content src="https://nguoithua.net/posts/nguyen-tac-thiet-ke-rest-api/" /> <author> <name>Nhan Vo</name> </author> <category term="Software Engineering" /> <summary> REST (Representational State Transfer) có thể hiểu đơn giản là một chuẩn thiết kế phần mềm, nó quy định cách mà client và server sẽ tương tác với nhau. Theo mình, việc thiết kế REST API là một việc hết sức khó khăn, nó không đơn giản như chỉ cần client gọi được là xong. Đôi khi, bạn sẽ bắt gặp những cuộc tranh luận xoay quoanh vấn đề nên viết thế này, không nên viết thế kia hoặc đôi khi bạn sẽ... </summary> </entry> <entry><title>Chuẩn hoá dữ liệu trong REST API</title><link href="https://nguoithua.net/posts/chuan-hoa-du-lieu-trong-rest-api/" rel="alternate" type="text/html" title="Chuẩn hoá dữ liệu trong REST API" /><published>2021-04-19T00:00:00+07:00</published> <updated>2021-04-19T00:00:00+07:00</updated> <id>https://nguoithua.net/posts/chuan-hoa-du-lieu-trong-rest-api/</id> <content src="https://nguoithua.net/posts/chuan-hoa-du-lieu-trong-rest-api/" /> <author> <name>Nhan Vo</name> </author> <category term="Software Engineering" /> <summary> Có 2 thứ không thể bỏ qua được trong một API, đó là request và response. Như là khi bạn thấy đâu đó một API, thứ đầu tiên mà bạn nghĩ request của API đó là gì, response là gì. Công việc hằng ngày của một backend developer bao gồm cả việc thiết kế API, xử lý và trả dữ liệu cho các dịch vụ gọi vào. Việc chuẩn hoá API giúp cho công việc hằng ngày trở nên dễ dàng hơn, cũng như có thể tái sử dụng ... </summary> </entry> <entry><title>8 định luật tiến hoá phần mềm của Lehman</title><link href="https://nguoithua.net/posts/8-dinh-luat-tien-hoa-phan-mem-cua-lehman/" rel="alternate" type="text/html" title="8 định luật tiến hoá phần mềm của Lehman" /><published>2021-04-03T00:00:00+07:00</published> <updated>2021-04-03T00:00:00+07:00</updated> <id>https://nguoithua.net/posts/8-dinh-luat-tien-hoa-phan-mem-cua-lehman/</id> <content src="https://nguoithua.net/posts/8-dinh-luat-tien-hoa-phan-mem-cua-lehman/" /> <author> <name>Nhan Vo</name> </author> <category term="Software Engineering" /> <summary> 8 định luật tiến hoá phần mềm của Lehman. Có sinh sản là có tiến hoá. Sinh vật có F1 F2, phần cứng có model1 model2, phần mềm có version1 version2. Sinh vật tiến hoá theo định luật Darwin, Mendel. Phần cứng tiến hoá theo định luật Moore, nano. Phần mềm tiến hoá theo định luật gì? Giáo sư Lehman đã nghiên cứu vấn đề này từ tận những năm 1970 đến nay! Bài viết này giới thiệu 8 định luật ông phá... </summary> </entry> <entry><title>Khái niệm căn bản trong kiến trúc phần mềm</title><link href="https://nguoithua.net/posts/khai-niem-can-ban-trong-kien-trc-phan-mem/" rel="alternate" type="text/html" title="Khái niệm căn bản trong kiến trúc phần mềm" /><published>2021-03-27T00:00:00+07:00</published> <updated>2021-03-27T00:00:00+07:00</updated> <id>https://nguoithua.net/posts/khai-niem-can-ban-trong-kien-trc-phan-mem/</id> <content src="https://nguoithua.net/posts/khai-niem-can-ban-trong-kien-trc-phan-mem/" /> <author> <name>Nhan Vo</name> </author> <category term="Software Architecture" /> <summary> Trong bài viết này, hãy cùng điểm qua các khái niệm căn bản trong kiến trúc phần mềm để có thể hiểu rõ hơn trong các bài viết về sau.Trong bài viết này, hãy cùng điểm qua các khái niệm căn bản trong kiến trúc phần mềm để có thể hiểu rõ hơn trong các bài viết về sau. No Silver Bullets! Điều đầu tiên, cho dù bạn nghĩ thế nào đi nữa thì chắc chắn sẽ không có chuyện 1 bước lên mây, bạn không thể ... </summary> </entry> <entry><title>Software Architecture Timeline</title><link href="https://nguoithua.net/posts/software-architecture-timeline/" rel="alternate" type="text/html" title="Software Architecture Timeline" /><published>2021-03-20T00:00:00+07:00</published> <updated>2021-03-20T00:00:00+07:00</updated> <id>https://nguoithua.net/posts/software-architecture-timeline/</id> <content src="https://nguoithua.net/posts/software-architecture-timeline/" /> <author> <name>Nhan Vo</name> </author> <category term="Software Architecture" /> <summary> 1950s Non-structured Programming ~1951 – Assembly 1960s Structured Programming Layering: 1 tier with the UI, Business Logic and Data Storage ~1958 – Algol 1970s Procedural / Functional Programming ~1970 – Pascal ~1972 – C 1979 – Model-View-Controller 1980s Object Oriented Programming... </summary> </entry> </feed>
